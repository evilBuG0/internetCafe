package com.ideal.oms.web.controller.contract;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.util.WebUtils;
import org.apache.commons.lang3.StringUtils;

import com.ideal.oms.entity.BusinessCode;
import com.ideal.oms.entity.Customer;
import com.ideal.oms.entity.MaintainCompany;
import com.ideal.oms.entity.MaintainContract;
import com.ideal.oms.entity.NetworkDrawing;
import com.ideal.oms.entity.Parameter;
import com.ideal.oms.framework.web.json.JsonObject;
import com.ideal.oms.security.service.SecurityServiceImp;
import com.ideal.oms.service.BusinessService;
import com.ideal.oms.service.CompanyService;
import com.ideal.oms.service.ContractService;
import com.ideal.oms.service.CustomerService;
import com.ideal.oms.service.NetworDrawingService;
import com.ideal.oms.service.ParameterService;
import com.ideal.oms.web.controller.contract.AbstractContractController;

@Controller
@RequestMapping(AbstractContractController.PORTAL_PREFIX)
public class ContractController extends AbstractContractController{
	Logger logger = LoggerFactory.getLogger(ContractController.class);

	@Resource
	private ContractService contractService;
	
	@Resource
	private ParameterService parameterService;
	
	@Resource
	private CustomerService customerService;
	
	@Resource
    private SecurityServiceImp securityServiceImp;
	
	@Resource
	private BusinessService businessService;
	
	@Resource
	private CompanyService companyService;
	
	@Resource
	private NetworDrawingService networDrawingService;
	
	@RequestMapping("contract_manage")
	public void index(Model model, HttpServletRequest request) {
		Map<String, Object> searchParams = WebUtils.getParametersStartingWith(
				request, "Q_");
		Sort sort = new Sort(Sort.Direction.DESC, "id");
		Page<MaintainContract> page = contractService.searchContractlist(searchParams,
				buildPageRequest(request, 5, sort));
		List<Customer> list_customer = customerService.findAll();
		List<MaintainCompany> list_company = companyService.findAll();
		model.addAttribute("list_customer", list_customer);
		model.addAttribute("list_company", list_company);
		model.addAttribute("page", page);
	}

	@RequestMapping("edit_contract_pop")
	public void edit(Model model,
			@RequestParam(value = "id", required = false) Long id) {
		List<Parameter> stateList = parameterService.findParameterListByType("contract_status");
		List<BusinessCode> businessCodeList = businessService.findAll();
		List<Customer> list_customer = customerService.findAll();
		List<MaintainCompany> list_company = companyService.findAll();
		MaintainContract contractInfo = null;
		if (id != null) {
			contractInfo = contractService.findContractOne(id);
		}
		model.addAttribute("contractInfo", contractInfo);
		model.addAttribute("stateList", stateList);
		model.addAttribute("businessCodeList", businessCodeList);
		model.addAttribute("list_customer", list_customer);
		model.addAttribute("list_company", list_company);
	}
	
	@RequestMapping("contract_detail_pop")
	public void detail(Model model,
			@RequestParam(value = "id", required = false) Long id) {
		MaintainContract contractInfo = null;
		if (id != null) {
			contractInfo = contractService.findContractOne(id);
		}
		Parameter stateInfo = parameterService.findParameterOne(contractInfo.getState().getId());
		BusinessCode businessCodeInfo = businessService.findBusinessOne(contractInfo.getBusinessCode().getId());
		Customer customerInfo = customerService.findCustomerOne(contractInfo.getCustomer().getId());
		MaintainCompany companyInfo = companyService.findCompanyOne(contractInfo.getCompany().getId());
		model.addAttribute("contractInfo", contractInfo);
		model.addAttribute("stateInfo", stateInfo);
		model.addAttribute("businessCodeInfo", businessCodeInfo);
		model.addAttribute("customerInfo", customerInfo);
		model.addAttribute("companyInfo", companyInfo);
	}
	
	@RequestMapping("save_contract_pop")
	@ResponseBody
	public JsonObject save(Model model, @RequestParam(value = "id") Long id,
			@RequestParam(required = false) String contract_no,
			@RequestParam(required = false) Double amount,
			@RequestParam(required = false) Long customerId,
			@RequestParam(required = false) Long companyId,
			@RequestParam(required = false) Long businessCodeId,
			@RequestParam(required = false) Long state,
			@RequestParam(required = false) String content,
			@RequestParam(required = false) String start_date,
			@RequestParam(required = false) String end_date) throws Exception  {
		
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		MaintainContract contract = new MaintainContract();
		if (id != null) {
			contract = contractService.findContractOne(id);
			contract.setContractNo(contract_no);
			contract.setAmount(amount);
//			contract.setCustomer(new Customer(customerId));
//			contract.setCompany(new MaintainCompany(companyId));
			contract.setBusinessCode(new BusinessCode(businessCodeId));
			contract.setState(new Parameter(state));
			contract.setContent(content);
			contract.setStartDate(StringUtils.isBlank(start_date) ? null : dateFormat.parse(start_date));
			contract.setEndDate(StringUtils.isBlank(end_date) ? null : dateFormat.parse(end_date));
			contract.setCreateDate(new Date());
			contract.setCreateUser(securityServiceImp.getLoginUser());
			contractService.saveContract(contract);
		} else {
			contract.setContractNo(contract_no);
			contract.setAmount(amount);
			contract.setCustomer(new Customer(customerId));
			contract.setCompany(new MaintainCompany(companyId));
			contract.setBusinessCode(new BusinessCode(businessCodeId));
			contract.setState(new Parameter(state));
			contract.setContent(content);
			contract.setStartDate(StringUtils.isBlank(start_date) ? null : dateFormat.parse(start_date));
			contract.setEndDate(StringUtils.isBlank(end_date) ? null : dateFormat.parse(end_date));
			contract.setCreateDate(new Date());
			contract.setCreateUser(securityServiceImp.getLoginUser());
			contract.setDelFlag(0L);
			contractService.saveContract(contract);
		}
		return JsonObject.success();
	}

	@RequestMapping("delete_contract_pop.do")
	@ResponseBody
	public JsonObject delete(HttpServletRequest request,
							@RequestParam(value = "id") Long[] ids) {
		if (ids != null) {
			contractService.deleteContract(ids);
			networDrawingService.deleteDrawing(ids);
			String path = request.getSession().getServletContext().getRealPath("/WEB-INF/upload/");
			for(int i=0;i<ids.length;i++){
				MaintainContract contract = contractService.findContractOne(ids[i]);
				Long companyId = contract.getCompany().getId();
				path += companyId + File.separator + ids[i];
				deleteDirectory(path);
			}
		}
		return JsonObject.success();
	}
	

	@RequestMapping("search_file_pop")
    public void searchFile(Model model,HttpServletRequest request,
    		@RequestParam(value = "id") Long id) {
		List<NetworkDrawing> list_drawing = networDrawingService.findByContractId(id);
		model.addAttribute("list_drawing",list_drawing);
    }
	
	@RequestMapping("download_file")
    public void downloadFile(HttpServletRequest request, HttpServletResponse response,
    						@RequestParam(value = "id") Long id) throws Exception{
		
		
		
		NetworkDrawing drawing = networDrawingService.findDrawingOne(id);
		String path = request.getSession().getServletContext().getRealPath("/WEB-INF/upload/");
		String filePath = drawing.getCompanyId() + "/" + drawing.getContractId()+"/";
		String fileName = drawing.getContent().substring(drawing.getContent().lastIndexOf("\\")+1);
		String downloadPath = path+filePath;
		System.out.println(fileName);
		System.out.println(downloadPath);
		
		File file = new File(downloadPath + "\\" + fileName);
//		if(!file.exists()){
//			response.setHeader("Content-type", "text/html;charset=UTF-8");
//			PrintWriter out = response.getWriter();
//            out.println("<script> alert('文件已被删除！'); </script>");
//            return;
//		}
//		
		response.setHeader("content-disposition", "attachment;filename=" + URLEncoder.encode(fileName, "UTF-8"));
		FileInputStream in = new FileInputStream(downloadPath + fileName);
		OutputStream out = response.getOutputStream();
		byte buffer[] = new byte[1024];
		int len = 0;
		while((len=in.read(buffer))>0){
		out.write(buffer, 0, len);
		}
		in.close();
		out.close();
    }
	
	
	@RequestMapping("upload_file_pop")
    public void uploadFile(Model model,HttpServletRequest request,
    		@RequestParam(value = "id") Long id) {
		MaintainContract contractInfo = new MaintainContract();
		if(id !=null){
			contractInfo.setId(id);
		}
		model.addAttribute("contractInfo", contractInfo);
    }
	
	@RequestMapping("file_upload")
    public void upload(HttpServletRequest request, HttpServletResponse response,
    						@RequestParam(value = "id") Long id,
    						@RequestParam(required = false) String type,
    						@RequestParam(required = false) String drawingName,
                            @RequestParam("file") MultipartFile mfile) throws Exception {
		MaintainContract contract = contractService.findContractOne(id);
		Long companyId = contract.getCompany().getId();
		Long contractId = contract.getId();
		String path = request.getSession().getServletContext().getRealPath("/WEB-INF/upload/");
		try {
		    path += companyId + File.separator + id;
		    InputStream stream = mfile.getInputStream();
		    File file = new File(path);
		    if(!file.isDirectory() && !file.exists()){
		    	((File) file).mkdirs();   
		    }
		    OutputStream bos = new FileOutputStream(path + "/" + mfile.getOriginalFilename());
		    System.out.println(path + File.separator + mfile.getOriginalFilename());
		    int bytesRead = 0;
		    byte[] buffer = new byte[1024*1024*10];
		    while ((bytesRead = stream.read(buffer, 0, 1024*1024*10)) != -1) {
		    	bos.write(buffer, 0, bytesRead);
		    }
		    bos.close();
		    stream.close();
			
			NetworkDrawing networkDrawing = new NetworkDrawing();
	        networkDrawing.setContractId(contractId);
	        networkDrawing.setCompanyId(companyId);
	        networkDrawing.setType(type);
	        networkDrawing.setDrawingName(drawingName);
	        networkDrawing.setContent(path + File.separator + mfile.getOriginalFilename());
	        networkDrawing.setCreateDate(new Date());
	        networkDrawing.setDelFlag(0L);
	        networDrawingService.saveDrawing(networkDrawing);
		} catch (Exception e) {
			e.printStackTrace();
			response.setHeader("Content-type", "text/html;charset=UTF-8");
			PrintWriter out = response.getWriter();
            out.println("<script> alert('文件上传失败！'); </script>");
		}
    }
	
	
	public static void main(String[] args){
//		File file =new File("E:\\Users\\aaaaa");    
//		//如果文件夹不存在则创建    
//		if  (!file .exists()  && !file .isDirectory())      
//		{       
//		    System.out.println("//不存在");  
//		    file .mkdirs();    
//		}
		deleteDirectory("E:\\Users\\1\\2");
	}

    /** 
     * 删除单个文件 
     * @param   sPath    被删除文件的文件名 
     */  
    public static void deleteFile(String sPath) {  
    	File file = new File(sPath);  
        if (file.isFile() && file.exists()) {  
            file.delete();  
        }  
    }  
    
    /** 
     * 删除目录（文件夹）以及目录下的文件 
     * @param   sPath 被删除目录的文件路径 
     */  
    public static void deleteDirectory(String sPath) {  
        if (!sPath.endsWith(File.separator)) {  
            sPath = sPath + File.separator;  
        }  
        File dirFile = new File(sPath);  
        File[] files = dirFile.listFiles();  
        for (int i = 0; i < files.length; i++) {  
            //删除子文件  
            if (files[i].isFile()) {  
            	System.out.println("1");
                deleteFile(files[i].getAbsolutePath()); 
                break;
            } //删除子目录  
            else {  
            	System.out.println("2");
                deleteDirectory(files[i].getAbsolutePath());  
                break;
            }  
        }  
      //删除当前目录  
       dirFile.delete();
    }  
}
