package com.ideal.oms.web.controller.businessCode;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.WebUtils;

import com.ideal.oms.entity.BusinessCode;
import com.ideal.oms.framework.web.json.JsonObject;
import com.ideal.oms.repository.BusinessRepository;
import com.ideal.oms.service.BusinessService;
import com.ideal.oms.web.controller.contract.ContractController;


@Controller
@RequestMapping(AbstractBusinessCodeController.PORTAL_PREFIX)
public class BusinessCodeController extends AbstractBusinessCodeController{
	Logger logger = LoggerFactory.getLogger(ContractController.class);

	@Resource
	private BusinessService businessService;
	
	@Resource
	private BusinessRepository businessRepository;
	
	@RequestMapping("businessCode_manage")
	public void index(Model model, HttpServletRequest request) {
		Map<String, Object> searchParams = WebUtils.getParametersStartingWith(
				request, "Q_");
		Sort sort = new Sort(Sort.Direction.DESC, "id");
		Page<BusinessCode> page = businessService.searchBusinessList(searchParams,
				buildPageRequest(request, 5, sort));
		model.addAttribute("page", page);
	}

	@RequestMapping("edit_businessCode_pop")
	public void edit(Model model,
			@RequestParam(value = "id", required = false) Long id) {
		BusinessCode businessCodeInfo = null;
		if (id != null) {
			businessCodeInfo = businessService.findBusinessOne(id);
		}
		model.addAttribute("businessCodeInfo", businessCodeInfo);
	}
	
	@RequestMapping("save_businessCode_pop")
	@ResponseBody
	public JsonObject save(Model model, @RequestParam(value = "id") Long id,
			@RequestParam(required = false) String businessCode,
			@RequestParam(required = false) String businessName ) throws Exception{
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		BusinessCode business = new BusinessCode();
		if (id != null) {
			business = businessService.findBusinessOne(id);
			business.setBusinessCode(businessCode);
			business.setBusinessName(businessName);
			businessService.saveBusiness(business);
		} else {
			business.setBusinessCode(businessCode);
			business.setBusinessName(businessName);
			business.setCreateDate(dateFormat.parse(dateFormat.format(new Date())));
			business.setDelFlag(0L);
			businessService.saveBusiness(business);
		}
		return JsonObject.success();
	}

	@RequestMapping("delete_businessCode_pop.do")
	@ResponseBody
	public JsonObject delete(@RequestParam(value = "id") Long[] ids) {
		if (ids != null) {
			businessService.deleteBusiness(ids);
		}
		return JsonObject.success();
	}

}
