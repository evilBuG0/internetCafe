package com.ideal.oms.security;

import com.ideal.oms.entity.security.Role;
import com.ideal.oms.entity.security.User;
import com.ideal.oms.security.repository.RoleMenuRepository;
import com.ideal.oms.service.LogLoginService;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.shiro.authc.*;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Resource;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

public class ShiroDbRealm extends AuthorizingRealm {

	@Resource
	private LogLoginService logLoginService;

	@Resource
	private SecurityService accountService;

	@Resource
	private RoleMenuRepository roleMenuRepository;
	private static final Logger logger = LoggerFactory
			.getLogger(ShiroDbRealm.class);

	/**
	 * 认证回调函数,登录时调用.
	 */
	@Override
	protected AuthenticationInfo doGetAuthenticationInfo(
			AuthenticationToken authcToken) throws AuthenticationException {
		try {
			UsernamePasswordToken token = (UsernamePasswordToken) authcToken;
			String loginName = token.getUsername();
			String passWord = String.valueOf(token.getPassword());
			Integer result = 0;// userWebservice.listUser(loginName,
								// passWord).getApiCode();
			User user = accountService.findUserByUsernameAndPassword(loginName,
					DigestUtils.md5Hex(passWord));
			if (user != null) {
				logger.debug(loginName);
				logger.debug("user login success");
				logLoginService.saveLogLogin(loginName, "登录成功");
				return new SimpleAuthenticationInfo(new ShiroUser(user.getId(),
						user.getUsername()), passWord, getName());
			} else {
				logger.debug("user login failed.");
				logLoginService.saveLogLogin(loginName, "登录失败");
				return null;
			}
		} catch (Exception e) {
			logger.error(e.getMessage(), e);
			return null;
		}
	}

	/**
	 * 授权查询回调函数, 进行鉴权但缓存中无用户的授权信息时调用.
	 */
	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(
			PrincipalCollection principals) {
		SimpleAuthorizationInfo info = new SimpleAuthorizationInfo();
		ShiroUser shiroUser = (ShiroUser) principals.getPrimaryPrincipal();
		User user = accountService.findUserByUsername(shiroUser.getUsername());
		List<Role> roles = accountService.getRoleByUser(user.getId());
		List<Long> roleIds = new ArrayList<Long>();
		logger.debug("getRole {}", shiroUser.getUsername());
		for (Role role : roles) {
			info.addRole(role.getRoleName());
			roleIds.add(role.getId());
		}
		List<String> buttons = null;
		if (!roleIds.isEmpty()) {
			buttons = roleMenuRepository.findButtonsByRoles(roleIds);
		}
		if (buttons != null && !buttons.isEmpty()) {
			info.addStringPermissions(buttons);
		}
		return info;
	}

	/**
	 * 自定义Authentication对象，使得Subject除了携带用户的登录名外还可以携带更多信息.
	 */
	public static class ShiroUser implements Serializable {
		private Long id;
		private String username;

		public ShiroUser(Long id, String username) {
			this.id = id;
			this.username = username;
		}

		public Long getId() {
			return id;
		}

		public String getUsername() {
			return username;
		}

		/**
		 * <shiro:principal/>输出.
		 */
		@Override
		public String toString() {
			logger.debug("ShiroUser{" + "id=" + id + ", username='" + username
					+ '\'' + '}');
			return username;
		}

		/**
		 * 重载hashCode,只计算loginName;
		 */
		@Override
		public int hashCode() {
			return username.hashCode();
		}

		/**
		 * 重载equals,只计算loginName;
		 */
		@Override
		public boolean equals(Object obj) {
			if (this == obj) {
				return true;
			}
			if (obj == null) {
				return false;
			}
			if (getClass() != obj.getClass()) {
				return false;
			}
			ShiroUser other = (ShiroUser) obj;
			if (username == null) {
				if (other.username != null) {
					return false;
				}
			} else if (!username.equals(other.username)) {
				return false;
			}
			return true;
		}
	}
}
